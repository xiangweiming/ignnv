function res = test_linearParam_reach_01_rlc_const()
% test_linearParam_reach_01_rlc_const - unit_test_function of 
% linear parametric reachability analysis
%
% Checks the solution of the linParamSys class for a RLC circuit example;
% It is checked whether the enclosing interval of the final reachable set 
% is close to an interval provided by a previous solution that has been saved
%
% Syntax:  
%    res = test_linearParam_reach_01_rlc_const()
%
% Inputs:
%    no
%
% Outputs:
%    res - boolean 
%
% Example: 
%
% 
% Author:       Matthias Althoff
% Written:      05-August-2016
% Last update:  ---
% Last revision:---

%------------- BEGIN CODE --------------


%init: get matrix zonotopes of the model
[matZ_A,matZ_B] = initRLC_uTest();
matI_A = intervalMatrix(matZ_A);

%get dimension
dim=matZ_A.dim;

%compute initial set
%specify range of voltages
u0 = intervalMatrix(0,0.2);

%compute inverse of A
intA = intervalMatrix(matZ_A);
invAmid = inv(mid(intA.int)); 

%compute initial set
intB = intervalMatrix(matZ_B);
R0 = invAmid*intB*u0 + intervalMatrix(0,1e-3*ones(dim,1));

%convert initial set to zonotope
R0 = zonotope(interval(R0));

%initial set
options.x0=center(R0); %initial state for simulation
options.R0=R0; %initial state for reachability analysis

%inputs
u=intervalMatrix(1,0.01);
U = zonotope(interval(intB*u));
options.uTrans=center(U);
options.U=U+(-options.uTrans); %input for reachability analysis

%other
options.tStart=0; %start time
options.tFinal=0.05; %final time
options.intermediateOrder = 2;

options.originContained = 0;
options.timeStep = 0.002;
options.eAt = expm(matZ_A.center*options.timeStep);
options.reductionTechnique = 'girard';
options.zonotopeOrder=400; %zonotope order
options.polytopeOrder=3; %polytope order
options.taylorTerms=6;

%time step
r = options.timeStep;
maxOrder=options.taylorTerms;

%instantiate linear dynamics with constant parameters
linSys  = linParamSys(matZ_A, eye(dim), r, maxOrder);
linSys2 = linParamSys(matI_A, eye(dim), r, maxOrder);

%initialize reachable set computations
Rcont = reach(linSys, options);
Rcont2 = reach(linSys2, options);

IH = interval(Rcont{end});
IH2 = interval(Rcont2{end});

%saved result
IH_saved = interval( ...
    [0.3067200690035154; 0.2616872191703539; 0.2051403716254177; 0.0707756477900419; 0.1216567307406273; 0.1010787601798773; -0.1673072044715816; -0.4331896212557915; -0.5594073909723405; -0.5978554911816146; -0.6058626644842706; -0.6052100617063316; -0.5932171095991562; -0.5330759261935420; -0.5091779668343777; -0.5144973106817243; -0.5035762376252840; -0.4336148149651266; -0.4100365687257340; -0.3578483826582020; -0.0515840122510596; -0.0567189553706038; -0.0616902217173047; -0.0580990863259193; -0.0600383306797646; -0.0691407589864406; -0.0644709887454324; -0.0511672083232316; -0.0413329318600860; -0.0371479436120820; -0.0359259607719026; -0.0356032192836810; -0.0352318205621816; -0.0340551782745166; -0.0308397491233303; -0.0317099826656333; -0.0274454100702628; -0.0284544121849952; -0.0273832975487777; -0.0250485456058093], ...
    [1.0124982151954574; 1.0222193824551438; 1.0667556792742721; 0.9830334258167768; 1.1250156576470318; 1.1633037741716572; 0.9705467647602903; 0.7670988796717453; 0.6572766964285166; 0.6192771454972875; 0.6095143481203018; 0.6057103269040351; 0.5932735352299435; 0.5330812673891328; 0.5091783977851441; 0.5144973407018902; 0.5035762394503057; 0.4336148150628423; 0.4100365687303785; 0.3578483826584068; -0.0184086246540716; -0.0090143328216639; -0.0105938420955163; -0.0043182793463628; -0.0029428408292004; -0.0097660843428770; -0.0005837419461909; 0.0177069967492428; 0.0296819374241836; 0.0342040785265877; 0.0353584514142638; 0.0355166323598826; 0.0352210711317552; 0.0340540687176623; 0.0308396522398838; 0.0317099754075300; 0.0274454095982230; 0.0284544121580781; 0.0273832975474205; 0.0250485456057484]);
IH_saved2 = interval( ...
    [0.2681372708347629; 0.2148297720224028; 0.1535486434281723; 0.0160705667046568; 0.0666251602980683; 0.0489890259843639; -0.2127867594581653; -0.4743883636454801; -0.5988726820025009; -0.6368246875494580; -0.6446986680375242; -0.6438929419676703; -0.6315276711504432; -0.5701496329090145; -0.5436159991396812; -0.5469967201190801; -0.5334665638659738; -0.4605976054387412; -0.4331311355518884; -0.3793588086053682; -0.0534024256111092; -0.0593543394563163; -0.0646612625606728; -0.0612895618460098; -0.0632973820747907; -0.0723988677827684; -0.0674205788640376; -0.0537748674950853; -0.0437668633014639; -0.0395226566187743; -0.0382856445590058; -0.0379563479936672; -0.0375734016680411; -0.0363521839087520; -0.0329901031120161; -0.0337288506811917; -0.0293100790656004; -0.0301702420970962; -0.0289090224745892; -0.0263371761496837], ...
    [1.0510850129082987; 1.0690806043653265; 1.1183510291625600; 1.0377411847596423; 1.1800513521382721; 1.2153978509191301; 1.0160288775379807; 0.8082985763614472; 0.6967422351942262; 0.6582463894589429; 0.6483503587305695; 0.6443932079973812; 0.6315840968609159; 0.5701549741108993; 0.5436164300908615; 0.5469967501392689; 0.5334665656909964; 0.4605976055364569; 0.4331311355565329; 0.3793588086055730; -0.0165902970735555; -0.0063791112661663; -0.0076230211759597; -0.0011279541492956; 0.0003160311945504; -0.0065082421678149; 0.0023656380313154; 0.0203145586087859; 0.0321158389548003; 0.0365787849362095; 0.0377181341026167; 0.0378697609267654; 0.0375626522226794; 0.0363510743506277; 0.0329900062284808; 0.0337288434230832; 0.0293100785935603; 0.0301702420701790; 0.0289090224732319; 0.0263371761496228]);
       
%check if slightly bloated versions enclose each other for IH
res_11 = (IH <= enlarge(IH_saved,1+1e-8));
res_12 = (IH_saved <= enlarge(IH,1+1e-8));

%check if slightly bloated versions enclose each other for IH2
res_21 = (IH2 <= enlarge(IH_saved2,1+1e-8));
res_22 = (IH_saved2 <= enlarge(IH2,1+1e-8));

%final result
res = res_11*res_12*res_21*res_22;


%------------- END OF CODE --------------